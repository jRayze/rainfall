main :
    0x0804853f <+0>:     push   ebp
    0x08048540 <+1>:     mov    ebp,esp
    0x08048542 <+3>:     and    esp,0xfffffff0 // align 16 octets
    0x08048545 <+6>:     call   0x80484d4 <p>  // appel fonction p
    0x0804854a <+11>:    leave
    0x0804854b <+12>:    ret

p :
    0x080484d4 <+0>:     push   ebp
    0x080484d5 <+1>:     mov    ebp,esp
    0x080484d7 <+3>:     sub    esp,0x68 // alloue 104 octets

    0x080484da <+6>:     mov    eax,ds:0x8049860 // attribue stdout a eax;
    0x080484df <+11>:    mov    DWORD PTR [esp],eax // met eax dans esp( 32bits )
    0x080484e2 <+14>:    call   0x80483b0 <fflush@plt> // appel fonction fflush

    0x080484e7 <+19>:    lea    eax,[ebp-0x4c] // on stock 76 octets dans eax
    0x080484ea <+22>:    mov    DWORD PTR [esp],eax // on met eax dans esp
    0x080484ed <+25>:    call   0x80483c0 <gets@plt> // appel de la fonction gets

    0x080484f2 <+30>:    mov    eax,DWORD PTR [ebp+0x4] //eax recupere la return adresse
    0x080484f5 <+33>:    mov    DWORD PTR [ebp-0xc],eax // met eax dans ebp - 12
    0x080484f8 <+36>:    mov    eax,DWORD PTR [ebp-0xc] // recupete la valeur contenue dans epb -12 dans eax;
    0x080484fb <+39>:    and    eax,0xb0000000 //
    
    0x08048500 <+44>:    cmp    eax,0xb0000000 // compare eax avec 0xb0000000
    0x08048505 <+49>:    jne    0x8048527 <p+83>
                                // si Ã©gal
    0x08048507 <+51>:    mov    eax,0x8048620 
    0x0804850c <+56>:    mov    edx,DWORD PTR [ebp-0xc] 
    0x0804850f <+59>:    mov    DWORD PTR [esp+0x4],edx
    0x08048513 <+63>:    mov    DWORD PTR [esp],eax
    0x08048516 <+66>:    call   0x80483a0 <printf@plt>

    0x0804851b <+71>:    mov    DWORD PTR [esp],0x1
    0x08048522 <+78>:    call   0x80483d0 <_exit@plt>
                                // sinon
    0x08048527 <+83>:    lea    eax,[ebp-0x4c] // met le buffer dans eax
    0x0804852a <+86>:    mov    DWORD PTR [esp],eax // eax est mis dans esp
    0x0804852d <+89>:    call   0x80483f0 <puts@plt> //

    0x08048532 <+94>:    lea    eax,[ebp-0x4c]
    0x08048535 <+97>:    mov    DWORD PTR [esp],eax
    0x08048538 <+100>:   call   0x80483e0 <strdup@plt>
    0x0804853d <+105>:   leave
    0x0804853e <+106>:   ret

frame_dummy : 
   0x080484b0 <+0>:     push   ebp
   0x080484b1 <+1>:     mov    ebp,esp
   0x080484b3 <+3>:     sub    esp,0x18  // alloue 24 octets
   0x080484b6 <+6>:     mov    eax,ds:0x8049758
   0x080484bb <+11>:    test   eax,eax
   0x080484bd <+13>:    je     0x80484d1 <frame_dummy+33>
   0x080484bf <+15>:    mov    eax,0x0
   0x080484c4 <+20>:    test   eax,eax
   0x080484c6 <+22>:    je     0x80484d1 <frame_dummy+33>
   0x080484c8 <+24>:    mov    DWORD PTR [esp],0x8049758
   0x080484cf <+31>:    call   eax
   0x080484d1 <+33>:    leave
   0x080484d2 <+34>:    ret
   0x080484d3 <+35>:    nop
