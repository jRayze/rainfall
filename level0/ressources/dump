Dump of assembler code for function main:

                                sauvegare le debut de la stackframe précédente
   0x08048ec0 <+0>:     push   ebp
                                on fait pointer ebp sur le début de la stackframe
   0x08048ec1 <+1>:     mov    ebp,esp
                                aligne esp sur 16 bits
   0x08048ec3 <+3>:     and    esp,0xfffffff0
                                alloue +32 octets sur esp
   0x08048ec6 <+6>:     sub    esp,0x20
                                recupere la valeur 32 bits contenue dans ebp + 12 (argv) et la stock dans eax 
   0x08048ec9 <+9>:     mov    eax,DWORD PTR [ebp+0xc]
                                ajoute +4 a eax (correspond a argv[1])
   0x08048ecc <+12>:    add    eax,0x4
                                recupere la valeur situé dans les 32 bits (4 octets; ex:256) situé a l'adresse eax
                                et la stock dans eax
   0x08048ecf <+15>:    mov    eax,DWORD PTR [eax]
                                ecrit la valeur de eax (ex: 256) dans esp
   0x08048ed1 <+17>:    mov    DWORD PTR [esp],eax

   -----------------------------------------------------------------------------------------------------------------------

                                appel de la fonction atoi
   0x08048ed4 <+20>:    call   0x8049710 <atoi>
                                compare ce qu'il y a dans eax avec la valeur 423
   0x08048ed9 <+25>:    cmp    eax,0x1a7
                                si les 2 sont différents on saute a main +152

   -----------------------------------------------------------------------------------------------------------------------

   0x08048ede <+30>:    jne    0x8048f58 <main+152>
                                on met le pointeur (sur le debut) de la string ("/bin/sh") de l'adresse 0x80c5350 dans esp
   0x08048ee0 <+32>:    mov    DWORD PTR [esp],0x80c5348
                                appel de strdup
   0x08048ee7 <+39>:    call   0x8050bf0 <strdup>
                                retour de fonction dans eax mis dans esp +16                      
   0x08048eec <+44>:    mov    DWORD PTR [esp+0x10],eax

                                on met 0  dans esp +20
   0x08048ef0 <+48>:    mov    DWORD PTR [esp+0x14],0x0
                                appel de fonction getegid
   0x08048ef8 <+56>:    call   0x8054680 <getegid>
                                retour de fonction dans esp + 28
   0x08048efd <+61>:    mov    DWORD PTR [esp+0x1c],eax

                                appel de fonction geteuid
   0x08048f01 <+65>:    call   0x8054670 <geteuid>
                                 retour de fonction dans esp + 24
   0x08048f06 <+70>:    mov    DWORD PTR [esp+0x18],eax
                                
                                preparation pour appel de ofnciton setresgid
   0x08048f0a <+74>:    mov    eax,DWORD PTR [esp+0x1c]
   0x08048f0e <+78>:    mov    DWORD PTR [esp+0x8],eax
   0x08048f12 <+82>:    mov    eax,DWORD PTR [esp+0x1c]
   0x08048f16 <+86>:    mov    DWORD PTR [esp+0x4],eax
   0x08048f1a <+90>:    mov    eax,DWORD PTR [esp+0x1c]
   0x08048f1e <+94>:    mov    DWORD PTR [esp],eax
   0x08048f21 <+97>:    call   0x8054700 <setresgid>

                                preparation pour appel de ofnciton setresuid
   0x08048f26 <+102>:   mov    eax,DWORD PTR [esp+0x18]
   0x08048f2a <+106>:   mov    DWORD PTR [esp+0x8],eax
   0x08048f2e <+110>:   mov    eax,DWORD PTR [esp+0x18]
   0x08048f32 <+114>:   mov    DWORD PTR [esp+0x4],eax
   0x08048f36 <+118>:   mov    eax,DWORD PTR [esp+0x18]
   0x08048f3a <+122>:   mov    DWORD PTR [esp],eax
   0x08048f3d <+125>:   call   0x8054690 <setresuid>

                                on met dup dans eax;
   0x08048f42 <+130>:   lea    eax,[esp+0x10]
                                on met dup dans le parametre 2 le retour de dup
   0x08048f46 <+134>:   mov    DWORD PTR [esp+0x4],eax
                                on met '/bin/sh' dans le parametre 1 
   0x08048f4a <+138>:   mov    DWORD PTR [esp],0x80c5348
                                appel execv
   0x08048f51 <+145>:   call   0x8054640 <execv>


   ---------------------------------------------------------------------------------------------------
   0x08048f56 <+150>:   jmp    0x8048f80 <main+192>
                                on link la sortie erreur dans eax
   0x08048f58 <+152>:   mov    eax,ds:0x80ee170
                                on met eax dans edx
   0x08048f5d <+157>:   mov    edx,eax
                                on met le pointeur (sur le debut) de la string ("No !\n") de l'adresse 0x80c5350 dans eax 
   0x08048f5f <+159>:   mov    eax,0x80c5350
                                on attribue edx pour l'argument 3
   0x08048f64 <+164>:   mov    DWORD PTR [esp+0xc],edx
                                on attribue 0x5(5) pour l'argument 2
   0x08048f68 <+168>:   mov    DWORD PTR [esp+0x8],0x5
                                on attribue 0x1(1) pour l'argument 1
   0x08048f70 <+176>:   mov    DWORD PTR [esp+0x4],0x1
                                on attribue eax (string ("No !\n")) pour l'argument 0
   0x08048f78 <+184>:   mov    DWORD PTR [esp],eax
                                appel de la fonction fwrite
   0x08048f7b <+187>:   call   0x804a230 <fwrite>
                                set eax a la valeur 0
   0x08048f80 <+192>:   mov    eax,0x0
                                quite la fonction
   0x08048f85 <+197>:   leave
   0x08048f86 <+198>:   ret


~$ cat /home/user/level1/.pass
