<p>
    0x08048444 <+0>:     push   ebp
    0x08048445 <+1>:     mov    ebp,esp
    0x08048447 <+3>:     sub    esp,0x18 // alloue 24 octets
    0x0804844a <+6>:     mov    eax,DWORD PTR [ebp+0x8] // met le buffer dans eax;
    0x0804844d <+9>:     mov    DWORD PTR [esp],eax // arg0 = buff (met eax dans esp)
    0x08048450 <+12>:    call   0x8048340 <printf@plt>
    0x08048455 <+17>:    leave
    0x08048456 <+18>:    ret
<n>
    0x08048457 <+0>:     push   ebp
    0x08048458 <+1>:     mov    ebp,esp

    0x0804845a <+3>:     sub    esp,0x218   // alloue 536 octets
    0x08048460 <+9>:     mov    eax,ds:0x8049804 // lie eax a stdin
    0x08048465 <+14>:    mov    DWORD PTR [esp+0x8],eax // argument 2 = stdin
    0x08048469 <+18>:    mov    DWORD PTR [esp+0x4],0x200 // argumetn 1 = 512
    0x08048471 <+26>:    lea    eax,[ebp-0x208] // argument 0 = buff[520]
    0x08048477 <+32>:    mov    DWORD PTR [esp],eax
    0x0804847a <+35>:    call   0x8048350 <fgets@plt>

    0x0804847f <+40>:    lea    eax,[ebp-0x208] // met buff dans eax
    0x08048485 <+46>:    mov    DWORD PTR [esp],eax // met buff dans esp
    0x08048488 <+49>:    call   0x8048444 <p> //appelle p

    0x0804848d <+54>:    mov    eax,ds:0x8049810 // met m dans eax;
    0x08048492 <+59>:    cmp    eax,0x1025544 // m == 16930116 ? 
    0x08048497 <+64>:    jne    0x80484a5 <n+78> // si n'est pas egal vas a l'instruction 78

    0x08048499 <+66>:    mov    DWORD PTR [esp],0x8048590 // arg0 = "/bin/cat /home/user/level5/.pass" dans esp
    0x080484a0 <+73>:    call   0x8048360 <system@plt> // appel fonction system
    0x080484a5 <+78>:    leave
    0x080484a6 <+79>:    ret

<main>
    0x080484a7 <+0>:     push   ebp         
    0x080484a8 <+1>:     mov    ebp,esp
    0x080484aa <+3>:     and    esp,0xfffffff0  // alignement 32 bits
    
    0x080484ad <+6>:     call   0x8048457 <n>    // appel fonction n
    
    0x080484b2 <+11>:    leave
    0x080484b3 <+12>:    ret